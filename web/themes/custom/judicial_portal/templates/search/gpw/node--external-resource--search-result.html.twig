{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% import "@judicial_portal/_icons.twig" as icons %}
{% set content_class = "col-sm-12" %}
<div class="row gpw-search-item {{ node.bundle }}">
  {% block logo %}
  {% endblock logo %}

  {% block content %}

    {% if content.field_file is not empty %}
      {% set content_class = "col-sm-10" %}
    {% endif %}

    {% if content.field_video_embed is not empty %}
      {% set content_class = "col-sm-8" %}
    {% endif %}

    {% if content.field_image is not empty %}
      {% set content_class = "col-sm-8" %}
    {% endif %}
    {% if content.field_date_range is not empty %}
      {% set content_class = "col-sm-8" %}
    {% endif %}

    <div class="{{ content_class }}">

      {% block title %}
        <h3>
          {{ node.title.value }}
          {% block url %}
            <a href="{{ url }}">
              {{ icons.get('link-icon', base_path ~ directory, '', 25, 25) }}
            </a>
          {% endblock url %}
        </h3>
      {% endblock title %}

      {% block description %}
        <div class="description">
          {{ content.search_api_excerpt }}
        </div>
      {% endblock description %}

      {% block tags %}
        <div class="tags text-muted">
          <span class="document-date">
            {{ node.field_date[0].date|date('d M Y')|t }}
          </span>
          <span class="type">
            {% if node.field_type[0].entity.name.value %}
              {{ icons.get('tag', base_path ~ directory, '', 20, 20) }}
              {{ node.field_type[0].entity.name.value }}
            {% endif %}
            {% if node.field_topic.isEmpty == false %}
              in
              {% for key, value in node.field_topic %}
                {% if key > 0 %}
                  {{ ', ' }}
                  {{ value }}
                {% endif %}
                {{ value.entity.name.value }}
              {% endfor %}
            {% endif %}
          </span>
        </div>
      {% endblock tags %}

      {% block undertags %}
      {% endblock undertags %}

      {% block download %}
      {% endblock download %}

    </div>
  {% endblock content %}
</div>
