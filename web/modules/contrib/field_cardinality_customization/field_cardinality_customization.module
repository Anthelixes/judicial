<?php

/**
 * @file
 * Contains field_cardinality_customization.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldConfigInterface;

/**
 * Implements hook_form_alter().
 */
function field_cardinality_customization_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only alter node_BUNDLE_form, node_BUNDLE_edit_form.
  $form_object = $form_state->getFormObject();
  if (!($form_object instanceof ContentEntityFormInterface)) {
    return;
  }
  /** @var \Drupal\Core\Entity\EntityInterface $node */
  $entity = $form_object->getEntity();
  $op = $form_object->getOperation();
  if (!$entity instanceof ContentEntityInterface ||
    !in_array($op, ['edit', 'add', 'default'], TRUE)
  ) {
    return;
  }
  $fields = $entity->getFields();
  foreach ($fields as $field) {
    $field_name = $field->getName();
    // Ignore Drupal fields like created, updated etc.
    if (!preg_match('/field_.*/', $field_name)) {
      continue;
    }
    $cardinality_alter = $field->getFieldDefinition()->getConfig($entity->bundle())->getThirdPartySettings('field_cardinality_customization');
    if (!empty($cardinality_alter) && !empty($cardinality_alter['alter'])) {
      $widget = &$form[$field_name]['widget'];
      field_cardinality_customization_widget_alter($widget);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_config_edit_form'.
 */
function field_cardinality_customization_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Field\FieldConfigInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  $form['field_cardinality_customization'] = [
    '#type' => 'checkbox',
    '#title' => t('Cardinality alter'),
    '#description' => t('Alter this field to make it accept only a single value for this content type.'),
    '#default_value' => $field->getThirdPartySetting('field_cardinality_customization', 'alter'),
    '#access' => $field->getFieldStorageDefinition()->getCardinality() != 1,
    '#weight' => 1,
  ];
  // Form submit callback.
  $form['#entity_builders'][] = 'field_cardinality_customization_form_field_config_edit_form_builder';
}

/**
 * Field config edit form submit callback.
 */
function field_cardinality_customization_form_field_config_edit_form_builder($entity_type, FieldConfigInterface $field, &$form, FormStateInterface $form_state) {
  $field->setThirdPartySetting('field_cardinality_customization', 'alter', $form_state->getValue('field_cardinality_customization'));
}

/**
 * Helper function to alter the widget of a multi-valued field.
 */
function field_cardinality_customization_widget_alter(&$widget) {
  if (!empty($widget['#type']) && $widget['#type'] == 'checkboxes') {
    $widget['#type'] = 'radios';
  }
  if (!empty($widget['#multiple'])) {
    $widget['#multiple'] = 0;
  }
  if (!empty($widget['add_more'])) {
    $widget['add_more']['#access'] = FALSE;
  }
}
